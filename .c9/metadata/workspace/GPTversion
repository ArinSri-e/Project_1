{"filter":false,"title":"GPTversion","tooltip":"/GPTversion","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["model ModelName","  options noimplicit","  uses \"mmxprs\"","  ! uses \"mminsight\" ! uncomment this line for an Xpress Insight model","","  declarations","    ! ...","    Objective:linctr","  end-declarations","","  writeln(\"Begin running model\")","  !...","  writeln(\"End running model\")","end-model",""],"id":1},{"start":{"row":0,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["model Project1","  uses \"mmxprs\"","","declarations","  number_of_products = 3","  products = 1..number_of_products","  number_of_materials = 4","  materials = 1..number_of_materials","  ","  product_names: array(products) of string","  material_names: array(materials) of string","  ","  price, limit_product, cu_lower_bound, cu_upper_bound: array(products) of real","  cost, limit_material: array(materials) of real","  ","  sell, copper, zinc, tin, aluminium: array(products) of mpvar   ! decision variables for product amounts and material use","  buy: array(materials) of mpvar   ! purchase decision variables for materials","  ","  cts_material: array(materials) of linctr   ! material constraints","end-declarations","","initialisations from \"smelt.dat\"","    product_names material_names price cost cu_lower_bound cu_upper_bound limit_product limit_material","end-initialisations","","! Objective function: Maximize profit","total_profit := sum(p in products) (price(p) * sell(p)) - sum(m in materials) (cost(m) * buy(m))","","! Copper constraints for each product (adjusted for material loss of 10%)","forall(p in products) do","  0.9 * copper(p) >= cu_lower_bound(p) * sell(p)  ! lower bound","  0.9 * copper(p) <= cu_upper_bound(p) * sell(p)  ! upper bound","end-do","","! Constraints for zinc in Brass (20%-50% zinc)","0.9 * zinc(1) >= 0.5 * sell(1)","0.9 * zinc(1) <= 0.8 * sell(1)","","! Constraints for tin in Bronze (must be blended with copper)","0.9 * tin(2) >= 0.6 * sell(2)","0.9 * tin(2) <= 0.8 * sell(2)","","! Constraints for Aluminium in Duralumin","0.9 * aluminium(3) >= 0.45 * sell(3)","","! Production capacity limits","forall(p in products) do","  sell(p) <= limit_product(p)","end-do","","! Material usage should not exceed the purchase amount (accounting for 10% loss in production)","buy(1) = sum(p in products) copper(p)","buy(2) = sum(p in products) zinc(p)","buy(3) = sum(p in products) tin(p)","buy(4) = sum(p in products) aluminium(p)","","! Total material purchase limits","forall(m in materials) do","  cts_material(m) := buy(m) <= limit_material(m)","end-do","","! Maximize the total profit","maximise(total_profit)","","! Output results","forall(m in materials) do","  writeln('The company should buy ', material_names(m), ' for ', getsol(buy(m)), ' kg.')","end-do","","forall(p in products) do","  writeln(product_names(p), ' should be produced ', getsol(sell(p)), ' kg.')","end-do","","writeln('The total maximum profit is ', getobjval, ' GBP')","","! Shadow prices for material constraints (dual values)","forall(m in materials) do","  writeln('The shadow price for resource ', material_names(m), ' is ', getdual(cts_material(m)))","end-do","","end-model",""]}],[{"start":{"row":81,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":82,"column":0},"action":"remove","lines":["model Project1","  uses \"mmxprs\"","","declarations","  number_of_products = 3","  products = 1..number_of_products","  number_of_materials = 4","  materials = 1..number_of_materials","  ","  product_names: array(products) of string","  material_names: array(materials) of string","  ","  price, limit_product, cu_lower_bound, cu_upper_bound: array(products) of real","  cost, limit_material: array(materials) of real","  ","  sell, copper, zinc, tin, aluminium: array(products) of mpvar   ! decision variables for product amounts and material use","  buy: array(materials) of mpvar   ! purchase decision variables for materials","  ","  cts_material: array(materials) of linctr   ! material constraints","end-declarations","","initialisations from \"smelt.dat\"","    product_names material_names price cost cu_lower_bound cu_upper_bound limit_product limit_material","end-initialisations","","! Objective function: Maximize profit","total_profit := sum(p in products) (price(p) * sell(p)) - sum(m in materials) (cost(m) * buy(m))","","! Copper constraints for each product (adjusted for material loss of 10%)","forall(p in products) do","  0.9 * copper(p) >= cu_lower_bound(p) * sell(p)  ! lower bound","  0.9 * copper(p) <= cu_upper_bound(p) * sell(p)  ! upper bound","end-do","","! Constraints for zinc in Brass (20%-50% zinc)","0.9 * zinc(1) >= 0.5 * sell(1)","0.9 * zinc(1) <= 0.8 * sell(1)","","! Constraints for tin in Bronze (must be blended with copper)","0.9 * tin(2) >= 0.6 * sell(2)","0.9 * tin(2) <= 0.8 * sell(2)","","! Constraints for Aluminium in Duralumin","0.9 * aluminium(3) >= 0.45 * sell(3)","","! Production capacity limits","forall(p in products) do","  sell(p) <= limit_product(p)","end-do","","! Material usage should not exceed the purchase amount (accounting for 10% loss in production)","buy(1) = sum(p in products) copper(p)","buy(2) = sum(p in products) zinc(p)","buy(3) = sum(p in products) tin(p)","buy(4) = sum(p in products) aluminium(p)","","! Total material purchase limits","forall(m in materials) do","  cts_material(m) := buy(m) <= limit_material(m)","end-do","","! Maximize the total profit","maximise(total_profit)","","! Output results","forall(m in materials) do","  writeln('The company should buy ', material_names(m), ' for ', getsol(buy(m)), ' kg.')","end-do","","forall(p in products) do","  writeln(product_names(p), ' should be produced ', getsol(sell(p)), ' kg.')","end-do","","writeln('The total maximum profit is ', getobjval, ' GBP')","","! Shadow prices for material constraints (dual values)","forall(m in materials) do","  writeln('The shadow price for resource ', material_names(m), ' is ', getdual(cts_material(m)))","end-do","","end-model","",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":84,"column":0},"action":"insert","lines":["model Project1","  uses \"mmxprs\"","","declarations","  number_of_products = 3","  number_of_materials = 4","  ","  products = 1..number_of_products","  materials = 1..number_of_materials","  ","  product_names: array(products) of string","  material_names: array(materials) of string","  ","  price, limit_product, cu_lower_bound, cu_upper_bound: array(products) of real","  cost, limit_material: array(materials) of real","  ","  sell, copper: array(products) of mpvar  ! Decision variables for product quantities and copper usage","  buy: array(materials) of mpvar          ! Decision variables for material purchases","  ","  cts_material: array(materials) of linctr ! Constraints for material limits","  ","  zinc, tin, aluminium: mpvar ! Single variables for materials specific to certain products","end-declarations","","initialisations from \"smelt.dat\"","    product_names material_names price cost cu_lower_bound cu_upper_bound limit_product limit_material","end-initialisations","","! Objective function: Maximize profit","total_profit := sum(p in products) (price(p) * sell(p)) - sum(m in materials) (cost(m) * buy(m))","","! Constraints for copper in each product (accounting for 10% material loss)","forall(p in products) do","  0.9 * copper(p) >= cu_lower_bound(p) * sell(p)  ! Lower bound for copper","  0.9 * copper(p) <= cu_upper_bound(p) * sell(p)  ! Upper bound for copper","end-do","","! Zinc constraints (Brass only, product 1: 20%-50%)","0.9 * zinc >= 0.2 * sell(1)","0.9 * zinc <= 0.5 * sell(1)","","! Tin constraints (Bronze only, product 2: 60%-80% copper, rest is tin)","0.9 * tin >= (1 - 0.8) * sell(2)  ! Tin must make up at least 20%","0.9 * tin <= (1 - 0.6) * sell(2)  ! Tin can make up at most 40%","","! Aluminium constraint (Duralumin only, product 3: at least 45%)","0.9 * aluminium >= 0.45 * sell(3)","","! Total material usage must not exceed the purchase amount (accounting for 10% loss)","buy(1) = sum(p in products) copper(p)","buy(2) = zinc  ! Zinc is used only in Brass","buy(3) = tin   ! Tin is used only in Bronze","buy(4) = aluminium  ! Aluminium is used only in Duralumin","","! Total material purchase limits","forall(m in materials) do","  cts_material(m) := buy(m) <= limit_material(m)","end-do","","! Production capacity constraints","forall(p in products) do","  sell(p) <= limit_product(p)","end-do","","! Maximize profit","maximise(total_profit)","","! Output results","forall(m in materials) do","  writeln('The company should buy ', material_names(m), ' for ', getsol(buy(m)), ' kg.')","end-do","","forall(p in products) do","  writeln(product_names(p), ' should be produced ', getsol(sell(p)), ' kg.')","end-do","","writeln('The total maximum profit is ', getobjval, ' GBP')","","! Shadow prices for material constraints (dual values)","forall(m in materials) do","  writeln('The shadow price for resource ', material_names(m), ' is ', getdual(cts_material(m)))","end-do","","end-model",""],"id":4}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":2},"action":"remove","lines":["  "],"id":5},{"start":{"row":9,"column":0},"end":{"row":9,"column":2},"action":"remove","lines":["  "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":2},"action":"remove","lines":["  "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":2},"action":"remove","lines":["  "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":2},"action":"remove","lines":["  "]},{"start":{"row":20,"column":0},"end":{"row":20,"column":2},"action":"remove","lines":["  "]}]]},"ace":{"folds":[],"scrolltop":863,"scrollleft":0,"selection":{"start":{"row":59,"column":33},"end":{"row":59,"column":33},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":52,"state":"start","mode":"ace/mode/text"}},"timestamp":1727438337728,"hash":"3096d9c45441efca05f3f1613138807c1aee340d"}