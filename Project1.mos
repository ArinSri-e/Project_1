model Project1
  uses "mmxprs"
  ! uses "mminsight" ! uncomment this line for an Xpress Insight model

declarations
  ! alloys= Brass Bronze Duralumin
  number_of_alloys=3
  alloys=1..number_of_alloys
  ! material = Cu Zn Tn Al
  number_of_material=4
  material=1..number_of_material


  !Name
  alloy_names:array(alloys) of string
  material_names:array(material) of string


  !Price= Price for each alloy
  price,limit_alloy:array(alloys) of real
  !Cost= Cost for each material
  cost,limit_material:array(material) of real


  !Constraints of proportions for materials in each alloy
  lower_bound:array(material,alloys) of real
  upper_bound:array(material,alloys) of real

  !Multiply composition to make the get rid of unwanted material
  composition:array(alloys,material) of real


  !variable
  !sell= alloy variable
  sell:array(alloys) of mpvar
  !sub_buy= material' variable for each alloy
  sub_buy:array(material,alloys) of mpvar
  !buy=Total material variable
  buy:array(material) of mpvar


  !constraints of material, lower bound, upperbound, and alloys to find the shadow price
  cts_material:array(material)of linctr
  cts_sub_lower:array(material,alloys)of linctr
  cts_sub_upper:array(material,alloys)of linctr
  cts_alloys:array(alloys)of linctr
end-declarations


initialisations from "smelt.dat"
    alloy_names material_names price cost lower_bound upper_bound composition limit_alloy limit_material
end-initialisations

!objective function
total_profit := sum(a in alloys) (price(a) * sell(a)) - sum(m in material) (cost(m) * buy(m))


!constraints for copper in each alloy
!lower limit
forall(m in material, a in alloys) do
  cts_sub_lower(m,a) :=0.9*sub_buy(m,a) >= lower_bound(m,a)*sell(a)
end-do
!upper limit
forall(m in material, a in alloys) do
  cts_sub_upper(m,a) :=0.9*sub_buy(m,a) <= upper_bound(m,a)*sell(a)
end-do


!Total material
forall(m in material) do
  buy(m)=sum(a in alloys)(sub_buy(m,a))
end-do

!constraints for material
forall(m in material) do
  cts_material(m) := buy(m) <= limit_material(m)
end-do

!forming material into alloys
forall(a in alloys) do
  sell(a) = 0.9 * sum(m in material)(composition(a,m)*sub_buy(m,a))
end-do

!constraint for alloys
forall(a in alloys) do
  cts_alloys(a):= sell(a)<=limit_alloy(a)
end-do

maximise(total_profit)

writeln

!values of material in each alloy
 forall(m in material, a in alloys) do
   writeln(material_names(m), ' for ', alloy_names(a), ' is ',getsol(sub_buy(m,a)))
 end-do
writeln

!Total material
forall(m in material) do
  writeln('The company should buy ', material_names(m), ' for ', getsol(buy(m)), ' kg.')
end-do
writeln

!How much the alloys should be produced
forall(a in alloys) do
  writeln(alloy_names(a), ' should be produced ',getsol(sell(a)), ' kg.')
end-do
writeln

!maximum profit
writeln('the total maximum profit is ', getobjval,' GBP')
writeln

!shadow price of total material
forall (m in material) do
  if(getslack(cts_material(m))<0.0001) then
    y := getrange(XPRS_LOACT,cts_material(m))
    z := getrange(XPRS_UPACT,cts_material(m))
    writeln('The shadow price for resource ', material_names(m), ' is ', getdual(cts_material(m)))
    writeln("The range for the dual for resource  (",y,",",z,")")
  end-if
end-do

!shadow price for upper limit of the material
forall(m in material, a in alloys) do
  if(getslack(cts_sub_upper(m,a))<0.0001) then
    y := getrange(XPRS_LOACT,cts_sub_upper(m,a))
    z := getrange(XPRS_UPACT,cts_sub_upper(m,a))
    writeln('The shadow price for resource ', material_names(m),' ', alloy_names(a), ' is ', getdual(cts_sub_upper(m,a)))
    writeln("The range for the dual for resource  (",y,",",z,")")
  end-if
end-do

writeln

!shadow price for lower limit of the material
forall(m in material, a in alloys) do
  if(getslack(cts_sub_lower(m,a))<0.0001) then
    y := getrange(XPRS_LOACT,cts_sub_lower(m,a))
    z := getrange(XPRS_UPACT,cts_sub_lower(m,a))
    writeln('The shadow price for resource lower ', material_names(m),' ', alloy_names(a), ' is ', getdual(cts_sub_lower(m,a)))
    writeln("The range for the dual for resource  lower (",y,",",z,")")
  end-if
end-do

writeln

forall(a in alloys) do
  if(getslack(cts_alloys(a))<0.0001) then
  y := getrange(XPRS_LOACT,cts_alloys(a))
  z := getrange(XPRS_UPACT,cts_alloys(a))
  writeln('The shadow price for alloys ', alloy_names(a), ' is ', getdual(cts_alloys(a)))
  writeln("The range for the dual for allots (",y,",",z,")")
  end-if
end-do

end-model
